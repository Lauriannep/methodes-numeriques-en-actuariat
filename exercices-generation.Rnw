\section{Exercices}
\label{sec:generation:exercices}

%%%
%%% Ficher de solutions (pas de réponses dans ce chapitre)
%%%

\Opensolutionfile{solutions}[solutions-generation]

\begin{Filesave}{solutions}
\section*{Chapitre \ref{chap:generation}}
\addcontentsline{toc}{section}{Chapitre \protect\ref{chap:generation}}

\end{Filesave}

%%%
%%% Début des exercices
%%%

<<echo=FALSE>>=
options(width = 50)
@

L'exercice \ref{chap:generation}.\ref{ex:generation:rgl} requiert d'installer le package
R \code{rgl}, disponible sur CRAN%
\footnote{\url{http://cran.r-project.org}}. %
Pour un utilisateur ayant les privilèges d'administrateur, entrer
simplement à la ligne de commande
<<echo=TRUE, eval=FALSE>>=
install.packages("rgl")
@
Pour utiliser les fonctions du package, il faut ensuite charger le
package en mémoire avec
<<echo=TRUE, eval=FALSE>>=
library(rgl)
@

Un utilisateur sans droit d'écriture dans le dossier
\verb|C:\Program Files| (sous Windows) devra installer le package dans
le dossier de son choix et spécifier celui-ci avec l'argument
\code{lib} de la fonction \code{install.packages}. Il faudra
également utiliser l'argument \code{lib.loc} de la fonction
\code{library} lors du chargement du package. Par exemple:
<<echo=TRUE, eval=FALSE>>=
install.packages("rgl", lib = "R:/R/library")
library(rgl, lib.loc = "R:/R/library")
@

\begin{exercice}
  Calculer cinq nombres pseudo-aléatoires avec chacun des générateurs
  congruentiels ci-dessous. Dans tous les cas, $m = 64$. Choisir
  l'amorce.
  \begin{enumerate}
  \item $a = 29$, $c = 17$
  \item $a = 9$, $c = 1$
  \item $a = 13$, $c = 0$
  \item $a = 11$, $c = 0$
  \end{enumerate}
  \begin{sol}
    Dans tous les cas, le générateur de nombres aléatoires est
    \begin{align*}
      x_{i}
      &= (ax_{i-1}+c) \bmod m \\
      &= (ax_{i-1}+c) -
      \left\lfloor
        \frac{ax_{i-1}+c}{m}
      \right\rfloor m
    \end{align*}
    où $m = 64$ et $x_{0} = 19$. Les suites ont été générées avec la
    fonction \code{rand} de la figure \ref{fig:generation:rand}.
    \begin{figure}
      \centering
      \begin{framed}
\begin{Scode}
rand <- function(n, a, c, m, seed)
{
    x <- numeric(n + 1)
    x[1] <- seed
    for (i in seq(n))
        x[i + 1] <- (a * x[i] + c) %% m
    x[-1]
}
\end{Scode}
      \end{framed}
      \caption{Code de la fonction \code{rand}.}
      \label{fig:generation:rand}
    \end{figure}
<<echo=FALSE>>=
rand <- function(n, a, c, m, seed)
{
    x <- numeric(n + 1)
    x[1] <- seed
    for (i in seq(n))
        x[i + 1] <- (a * x[i] + c) %% m
    x[-1]
}
@
    \begin{enumerate}
    \item
<<echo=TRUE>>=
rand(n = 5, a = 29, c = 17, m = 64, seed = 19)
@
    \item
<<echo=TRUE>>=
rand(n = 5, a = 9, c = 1, m = 64, seed = 19)
@
    \item
<<echo=TRUE>>=
rand(n = 5, a = 13, c = 0, m = 64, seed = 19)
@
    \item
<<echo=TRUE>>=
rand(n = 5, a = 11, c = 0, m = 64, seed = 19)
@
    \end{enumerate}
  \end{sol}
\end{exercice}


\begin{exercice}
  \begin{enumerate}
  \item Écrire une fonction en S faisant la mise en oeuvre du
    générateur congruentiel multiplicatif avec $m = 2^{13} - 1$ et $a
    = 17$. Générer 500 nombres pseudo-aléatoire, puis faire un
    graphique des paires $(x_i, x_{i+1})$. Sur combien de lignes les
    points sont-ils alignés?
  \item Répéter la partie a) avec $a = 85$.
  \end{enumerate}
  \begin{sol}
    \begin{enumerate}
    \item On utilise de nouveau la fonction \code{rand} de
      la figure \ref{fig:generation:rand}. Le graphique de la figure
      \ref{fig:generation:a=17} a été créé avec les commandes
<<echo=TRUE, eval=FALSE>>=
x <- rand(n = 500, a = 17, c = 0, m = 2^13-1, seed = 19)
plot(x[-length(x)], x[-1],
     xlab = expression(x[i]), ylab = expression(x[i+1]), pch = 19)
@
      On compte 17 lignes dans le graphique.
      \begin{figure}
        \centering
<<echo=FALSE,fig=TRUE>>=
x <- rand(n = 500, a = 17, c = 0, m = 2^13-1, seed = 19)
plot(x[-length(x)], x[-1],
     xlab = expression(x[i]), ylab = expression(x[i+1]), pch = 19)
@
        \caption{Paires de valeurs du générateur congruentiel
          multiplicatif avec $m = 2^{31} - 1$ et $a = 17$.}
        \label{fig:generation:a=17}
      \end{figure}
    \item Similaire à la partie a), sauf que les nombres sont générés
      avec
<<echo=TRUE, eval=FALSE>>=
x <- rand(n = 500, a = 85, c = 0, m = 2^13-1, seed = 19)
@
      Ce générateur semble préférable à celui en a) puisque les
      points sont plus uniformément disposés sur le graphique (voir
      figure \ref{fig:generation:a=85}).
      \begin{figure}[btp]
        \centering
<<echo=FALSE,fig=TRUE>>=
x <- rand(n = 500, a = 85, c = 0, m = 2^13-1, seed = 19)
plot(x[-length(x)],
     xlab = expression(x[i]), ylab = expression(x[i+1]), pch = 19)
@
        \caption{Paires de valeurs du générateur congruentiel
          multiplicatif avec $m = 2^{31} - 1$ et $a = 85$.}
        \label{fig:generation:a=85}
      \end{figure}
    \end{enumerate}
  \end{sol}
\end{exercice}

\begin{exercice}
  \label{ex:generation:rgl}
  Le générateur RANDU, qui a longtemps été le plus populaire
  générateur de nombres pseudo-aléatoires, est défini ainsi:
  \begin{displaymath}
    x_i = 65539 x_{i - 1} \bmod 2^{31}.
  \end{displaymath}
  Les nombres aléatoires obtenus avec ce générateur présentent une
  excellente structure aléatoire en une et en deux dimensions. On peut
  toutefois démontrer mathématiquement qu'en trois dimensions, les
  triplets $(x_i, x_{i+1}, x_{i+2})$ se retrouvent sur quinze plans ou
  moins, rendant ainsi assez prévisible la valeur de $x_{i+2}$ étant
  donné les deux autres valeurs.
  \begin{enumerate}
  \item Générer une suite $\{x_i\}$ de longueur \nombre{20002} avec le
    générateur RANDU et poser $u_i = 2^{-31} x_i$. Pour tous les
    triplets $(u_i, u_{i+1}, u_{i+2})$, sélectionner les cas où $0,5
    \leq u_{i + 1} \leq 0,51$ et faire un graphique de $u_{i+2}$ en
    fonction de $u_i$. Commenter le graphique obtenu.
  \item Générer une suite $\{x_i\}$ de longueur \nombre{1002} avec le
    générateur RANDU. À l'aide de R, placer les triplets
    $(u_i, u_{i+1}, u_{i+2})$ dans un graphique en trois dimensions
    avec la fonction \code{rgl.points} du package \code{rgl}, puis
    faire pivoter le graphique jusqu'à ce que les quinze plans sur
    lesquels se trouvent les points soient visibles. (On peut
    également utiliser la fonction \code{spin} de S-Plus.)
  \end{enumerate}
  \begin{sol}
    \begin{enumerate}
    \item On obtient environ 200 points alignés sur 10 lignes.
<<echo=TRUE, eval=FALSE>>=
u <- rand(n = 20002, a = 65539, c = 0, m = 2^31, seed=19)/2^31
mat <- matrix(c(u[1:20000], u[2:20001], u[3:20002]), ncol = 3)
mat <- mat[(0.5 <= mat[,2]) & (mat[,2] <= 0.51), c(1, 3)]
plot(mat, xlab = expression(u[i]), ylab = expression(u[i+2]))
@
    \item
<<echo=TRUE, eval=FALSE>>=
library(rgl)
u <- rand(n = 1002, a = 65539, c = 0, m = 2^31, seed=19)/2^31
rgl.points(u[1:1000], u[2:1001], u[3:1002])
@
    \end{enumerate}
  \end{sol}
\end{exercice}

\Closesolutionfile{solutions}

%%% Local Variables:
%%% mode: latex
%%% TeX-master: methodes_numeriques-partie_2
%%% coding: utf-8
%%% End:
