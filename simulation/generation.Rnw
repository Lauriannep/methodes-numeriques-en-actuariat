%%% Copyright (C) 2018 Vincent Goulet
%%%
%%% Ce fichier fait partie du projet
%%% «Méthodes numériques en actuariat avec R»
%%% http://github.com/vigou3/methodes-numeriques-en-actuariat
%%%
%%% Cette création est mise à disposition selon le contrat
%%% Attribution-Partage dans les mêmes conditions 4.0
%%% International de Creative Commons.
%%% http://creativecommons.org/licenses/by-sa/4.0/

\chapter{Génération de nombres aléatoires uniformes}
\label{chap:generation}

<<echo=FALSE>>=
options(width = 52)
@

\begin{objectifs}
\item Identifier des applications actuarielles de la simulation
  stochastique.
\item Énoncer les caractéristiques d'un bon générateur de nombre
  pseudo-aléatoires.
\item Utiliser l'opérateur mathématique modulo.
\item Générer des nombres pseudo-aléatoires à l'aide d'un générateur
  congruentiel linéaire.
\item Établir les caractéristiques d'un générateur congruentiel
  linéaire, notamment sa période.
\item Utiliser les générateurs de nombres aléatoires de Excel et
  R.
\end{objectifs}

Ce chapitre traite de la simulation de nombres (pseudo) aléatoires
distribués uniformément sur l'intervalle $(0, 1)$. La transformation
de ces nombres uniformes en nombres provenant d'autres distributions
statistiques fera l'objet du prochain chapitre.

%% Les floats ne peuvent se trouver à l'intérieur d'un environnement
%% de framed.sty utilisé par prob-enonce.
\begin{figure}
  \centering
<<echo=FALSE, fig=TRUE>>=
X <- cbind(c(8, 1, 7, 10, 6, 4, 4, 8, 8, 4, 6, 8),
           c(8, 2, 4, 3, 5, 3, 4, 5, 3, 6, 6, 7))
plot(X, cex = 0.75, pch = 19, xlab = "x", ylab = "y",
     xlim = c(0, 10), ylim = c(2, 8))
hpts <- chull(X)
hpts <- c(hpts, hpts[1])
lines(X[hpts, ])
@
  \caption{Exemple d'enveloppe convexe d'un ensemble de points}
  \label{fig:generation:chull}
\end{figure}

\begin{prob-enonce}
  L'enveloppe convexe (\emph{convex hull}) d'un ensemble de
  points (dans le plan, pour simplifier) est l'ensemble des points
  qui, lorsque reliés entre eux, forment une structure convexe
  contenant tous les autres points. La \autoref{fig:generation:chull} en présente
  un exemple.

  Dans le problème des quatre points de
  \cite{Sylvester:fourpoint:1865}, on cherche la probabilité que
  l'enveloppe convexe de quatre points placés dans une région $R$
  forme un triangle (voir l'article de
  \citeauthor{Mathworld:FourPoint} dans MathWorld pour plus de
  détails).

  Nous souhaitons vérifier que lorsque les quatre points sont distribués
  uniformément sur un carré, la probabilité que leur enveloppe convexe
  forme un triangle est $\frac{11}{36} \approx 0,30556$.
\end{prob-enonce}


\section{Pourquoi faire de la simulation?}
\label{sec:generation:pourquoi}

La simulation stochastique est une technique de plus en plus utilisée
en actuariat comme dans la plupart des sciences appliquées, en génie,
en finance, etc. Les modèles mathématiques et la simulation
stochastique comportent plusieurs avantages par rapport à
l'expérimentation directe, dont, entre autres:
\begin{itemize}
\item la simulation est non destructrice et peu coûteuse;
\item le système considéré n'a pas besoin d'exister;
\item la simulation est facile à répéter;
\item l'évolution dans la simulation peut être plus rapide que dans la
  réalité;
\item la simulation permet de considérer des modèles très complexes
  impossibles à traiter analytiquement.
\end{itemize}
En revanche, au rayon des inconvénients, on note:
\begin{itemize}
\item le coût (en temps et en argent) de modélisation et de
  programmation s'avère parfois important;
\item le temps d'exécution peut devenir excessif;
\item la simulation ne fournit que des estimations;
\item l'analyse statistique des résultats peut ne pas toujours être
  simple.
\end{itemize}

À la base, toute étude de simulation requiert une source de nombres
aléatoires. Or, ces nombres aléatoires ne sont pas toujours facile à
obtenir --- surtout en grande quantité --- et la qualité de la source
est primodiale pour que l'étude soit fiable. En effet, un générateur
qui ne fournirait pas des nombres suffisamment aléatoires, ou alors
qui se répètent trop rapidement, peut corrompre les résultats d'une
étude jusqu'à rendre ses conclusions invalides.

Les nombres aléatoires sont également beaucoup utilisés en
cryptographie. Ici encore, un générateur de mauvaise qualité peut
avoir des conséquences fâcheuses. Par exemple, si la période du
générateur est trop courte, il devient relativement facile de percer
la sécurité d'un système en découvrant le mot de passe par une attaque
en force.

\begin{prob-astuce}
  Nous pourrons faire la vérification demandée par simulation. L'idée
  consiste à générer les coordonnées de quatre points dans le plan et
  de vérifier si trois de ceux-ci forment l'enveloppe convexe ---
  autrement dit, l'enveloppe est un triangle. En répétant cette
  procédure un grand nombre de fois, nous pourrons calculer la
  \emph{proportion} d'enveloppes triangulaires et ainsi obtenir une
  estimation de la \emph{probabilité} que l'enveloppe convexe de
  quatre points dans le plan forme un triangle.

  Pour nous aider, la fonction \code{chull} de R calcule l'enveloppe
  convexe d'un ensemble de points. Plus précisément, la fonction
  retourne les indices des points faisant partie de l'enveloppe. Par
  exemple, les coordonnées cartésiennes des points de la
  \autoref{fig:generation:chull} sont:
<<echo=TRUE>>=
x <- c(8, 1, 7, 6, 4, 4, 8, 8, 4, 6, 8, 10)
y <- c(8, 2, 4, 5, 3, 4, 5, 3, 6, 6, 7, 3)
@
  Ceux formant l'enveloppe se trouvent aux positions $12$, $2$,
  $9$ et $1$ des vecteurs de coordonnées:
<<echo=TRUE>>=
chull(x, y)
@
\end{prob-astuce}


\section{Générateurs de nombres aléatoires}
\label{sec:generation:generateurs}

Nous souhaitons obtenir des nombres issus d'une distribution uniforme sur un
intervalle quelconque, en général $(0, 1)$. Comment procéder?
\begin{enumerate}
\item Nous pouvons utiliser les résultats de processus physiques aléatoires
  en apparence comme, par exemple:
  \begin{itemize}
  \item le lancer d'une pièce de monnaie ou d'un dé;
  \item des nombres pris au hasard dans des tableaux de rapports ou
    dans un annuaire;
  \item la roulette;
  \item le bruit électronique (tableaux RAND);
  \item les intervalles de temps dans un processus de décroissance
    radioactive sont considérés parfaitement aléatoires; le site
    \link{http://www.fourmilab.ch/hotbits/}{HotBits} fournit des
    nombres issus d'un tel processus.
  \end{itemize}
  L'utilisation de listes de nombres aléatoires ou de sources
  physiques est toutefois peu pratique avec un ordinateur, surtout
  lorsque l'on a besoin de milliers ou de millions de nombres
  aléatoires.
\item Une ancienne technique est celle des carrés centraux de
  von~Neumann: on prend un nombre à quatre chiffres, on l'élève au
  carré puis on extrait les quatre chiffres du milieu, et ainsi de
  suite. Par exemple:
  \begin{align*}
    8653^2 &= 74\symbf{8744}09 \\
    8744^2 &= 76\symbf{4575}36 \\
    4575^2 &= 20\symbf{9306}25
  \end{align*}
\item Nous pouvons construire des générateurs basés sur la suite de
  Fibonacci, des générateurs chaotiques, etc.
\end{enumerate}

En fait, les générateurs couramment utilisés aujourd'hui dans les
ordinateurs sont des évolutions des générateurs dits
\emph{congruentiels}. Ils sont particulièrement utiles parce
qu'aisément \emph{reproduisibles}. De plus, nous pouvons généralement
en connaitre les propriétés --- notamment la période --- par une
analyse mathématique poussée. \citet[section 3.1]{Knuth:ACP:vol2:1997}
fournit un exemple éloquent de l'importance de pouvoir démontrer
mathématiquement les propriétés d'un générateur de nombres aléatoires.
Cette référence de quelques pages seulement est fournie dans le site
du cours; la lire avant d'aller plus loin.

C'est fait? Bien. Intéressant, n'est-ce pas?

Dans la suite, nous nous concentrerons sur les générateurs de nombres
pseudo-aléatoires. En général, nous exigerons d'un générateur de ce type
qu'il:
\begin{enumerate}
\item produise des nombres distribués approximativement uniformément;
\item produise des nombres approximativement indépendants dans un bon
  nombre de dimensions;
\item possède une période suffisamment longue (au moins $2^{60}$);
\item soit facilement reproduisible à partir d'un point de départ
  donné, mais qu'il soit autrement impossible à prédire.
\end{enumerate}


\section{Congruence et modulo}
\label{sec:generation:congruence}

Les générateurs congruentiels utilisent l'arithmétique modulo. Une
propriété de base de cette arithmétique est l'équivalence, ou
congruence, modulo $m$.

\begin{definition}
  Deux nombres $a$ et $b$ sont dits \emph{équivalents}, ou
  \emph{congruents}, modulo $m$ si la différence entre $a$ et $b$ est
  un entier divisible par $m$. Mathématiquement,
  \begin{equation*}
    a \equiv b \bmod m \quad\Leftrightarrow\quad \frac{a - b}{m} = k, \quad
    k \in \mathbb{Z}.
  \end{equation*}
\end{definition}

En d'autres mots, deux nombres sont équivalents modulo $m$ si la
distance entre ceux-ci est un multiple de $m$. La notion d'équivalence
partitionne donc l'ensemble des nombres (ici, les réels).

\begin{exemple}
  On a
  \begin{enumerate}
  \item $5 \equiv 14 \bmod 3$ car $\dfrac{14 - 5}{3} = 3$; $14$ et $5$
    sont distants de $9$, un multiple de $3$;
  \item $-1 \equiv 5 \bmod 3$ car $\dfrac{5 + 1}{3} = 2$; $-1$ et $5$
    sont distants de $6$, un multiple de $3$;
  \item $0,33 \equiv 1,33 \bmod 1$; on notera que le calcul en modulo $1$
    équivaut à retourner la partie fractionnaire d'un nombre;
  \item la minute dans l'heure est donnée en modulo $60$: 00h15, 1h15,
    2h15, \dots sont des heures équivalentes modulo $60$.
  \end{enumerate}
  \qed
\end{exemple}

De la définition de congruence découle celle de \emph{réduction
  modulo} ou \emph{résidu modulo}: si $a \equiv b \bmod m$ et $0 \leq
a < m$, alors $a$ est le résidu de la division de $b$ par $m$, ou le
résidu de $b$ modulo $m$, c'est-à-dire
\begin{equation*}
  a = b \bmod m
  \quad\Leftrightarrow\quad
  a = b - \left\lfloor \frac{b}{m} \right\rfloor m,
\end{equation*}
où $\lfloor x \rfloor$ est le plus grand entier inférieur ou égal à
$x$.

La plupart des langages de programmation et logiciels à connotation
mathématique comportent un opérateur ou une fonction modulo:
\begin{itemize}
\item R: \verb|%%|;
\item Excel: \code{MOD()}.
\end{itemize}


\section{Générateurs congruentiels linéaires}
\label{sec:generation:congruentiel}

Dans un générateur congruentiel linéaire, tout nombre dans la suite
générée détermine le nombre suivant par la formule
\begin{equation*}
  x_i = (a x_{i - 1} + c) \bmod m,
\end{equation*}
où $0 \leq x_i < m$ et
\begin{itemize}
\item $a$ est appelé le \emph{multiplicateur};
\item $c$ est appelé l'\emph{incrément};
\item $m$ est appelé le \emph{module};
\item $x_0$ (un nombre quelconque) est l'\emph{amorce} («\emph{seed}»).
\end{itemize}

Un générateur est dit \emph{multiplicatif} lorsque l'incrément est
$c = 0$, et \emph{mixte} dans le cas contraire.

Pour obtenir des nombre uniformes sur $[0, 1]$ ou $(0, 1)$, il suffit
de définir
\begin{equation*}
  u_i = \frac{x_i}{m}.
\end{equation*}

\tipbox{La méthode de génération des nombres est entièrement
  déterministe, c'est pourquoi il convient mieux de parler de nombres
  \emph{pseudo}-aléatoires.}

\begin{prob-astuce}
  Ce générateur de nombres pseudo-aléatoires distribués uniformément
  sur $(0, 1)$ pourrait nous permettre de générer les coordonnées en
  abscisse et en ordonnée de quatre points sur un carré $1 \times 1$.
\end{prob-astuce}

Un générateur congruentiel est forcément périodique puisqu'il ne peut
prendre, au mieux, que les valeurs
\begin{itemize}
\item $0, 1, 2, \dots, m - 1$ pour un générateur mixte;
\item $1, 2, \dots, m - 1$ pour un générateur multiplicatif.
\end{itemize}
C'est pourquoi nous cherchons donc à avoir la période la plus longue
possible, tout en obtenant des suites en apparence aléatoires.

Pour les générateurs multiplicatifs ($c = 0$), la période maximale
$m - 1$ est atteinte si:
\begin{itemize}
\item $m$ est un nombre premier (on en choisira un grand);
\item $a$ est une \emph{racine primitive} de $m$, c'est à dire que
  le plus petit entier $k$ satisfaisant
  \begin{equation*}
    1 = a^k \bmod m
  \end{equation*}
  est $k = m - 1$.
\end{itemize}
Des valeurs populaires sont $m = 2^{31} - 1$ (nombre premier de
Mersenne) et $a = 7^5$.

\begin{exemple}
  Soit un générateur congruentiel multiplicatif avec $a = 7$ et $m =
  31$. Les quatre premiers nombres pseudo-aléatoires avec l'amorce
  $x_0 = 19$ sont:
  \begin{align*}
    (7 \times 19) \bmod 31 &= 133 \bmod 31 = 9 \rightarrow x_1 \\
    (7 \times 9) \bmod 31 &= 63 \bmod 31 = 1 \rightarrow x_2 \\
    (7 \times 1) \bmod 31 &= 7 \bmod 31 = 7 \rightarrow x_3 \\
    (7 \times 7) \bmod 31 &= 49 \bmod 31 = 18 \rightarrow x_4.
  \end{align*}
  \qed
\end{exemple}

\begin{exemple}
  \label{exemple:generation:rand}
  Cet exemple illustre l'effet des différents paramètres d'un
  générateur congruentiel sur la qualité des nombres pseudo-aléatoires
  produits.

  \gotorbox{Exécuter le code informatique R de la
    \autoref{sec:generation:code} correspondant à cet exemple.}%
  \qed
\end{exemple}

\begin{exemple}
  Un générateur apparemment de qualité en une dimension peut
  rapidement se révéler médiocre dans les dimensions supérieures. Le
  présent exemple en fait la démonstration en deux dimensions avec un
  générateur tout simple, alors que l'\autoref{ex:generation:rgl}
  reprend les mêmes idées en trois dimensions avec un générateur
  longtemps considéré standard.

  \gotorbox{Exécuter le code informatique R de la
    \autoref{sec:generation:code} correspondant à cet exemple.}%
  \qed
\end{exemple}


\section{Générateurs utilisés dans Excel et R}

Avant d'utiliser pour quelque tâche moindrement importante un
générateur de nombres aléatoires inclus dans un logiciel, il importe
de s'assurer de la qualité de celui-ci. Vous trouverez en général
relativement facilement l'information pertinente dans Internet.

Nous présentons ici, sans entrer dans les détails, les générateurs
utilisés dans Excel et R.

\subsection{Générateur de Excel}

La fonction à utiliser dans Microsoft Excel pour obtenir un nombre
aléatoire dans l'intervalle $(0, 1)$ est \code{ALEA()} (dans la
version française) ou \code{RAND()} (dans la version anglaise).

L'historique de Microsoft n'est pas reluisant lorsqu'il s'agit de mise
en œuvre de générateurs de nombres aléatoires pour Excel. Au fil
des ans, plusieurs articles scientifiques ont démontré les lacunes de
la fonction \code{RAND()}.

Par exemple, dans les versions 2003 et 2007, Microsoft Excel utilisait
le générateur de nombres aléatoire Whichmann--Hill. Ce générateur a
longtemps été considéré comme le meilleur disponible, mais il a été
supplanté ces dernières années. Microsoft prétendait que la période du
générateur Whichmann--Hill est $10^{13}$, mais omettait de tenir
compte de littérature scientifique démontrant qu'elle est plutôt de $6,95 \times
10^{12} \approx 2^{43}$, une période désormais considérée trop courte.

De plus, la mise en œuvre du générateur Whichmann--Hill dans Excel
2003 avait le fâcheux défaut de pouvoir générer des nombres négatifs.
Ce défaut a plus tard été corrigé par un \emph{Service Pack} 1 de
Office 2003 ainsi que dans la version 2007.

L'article de \cite{McCullough:Excel2007:2008} demeure une référence
sur les lacunes observées dans la génération de nombres aléatoires et
les procédures statistiques dans Excel 2007. De plus,
\citet{McCullough:MENTWH:2008} démontrent que le générateur de Excel
ne saurait être véritablement celui de Whichmann--Hill. Les auteurs
écrivent en conclusion:
\begin{quote}
  Twice Microsoft has attempted to implement the dozen lines of code
  that define the Wichmann and Hill (1982) RNG\footnote{%
    \emph{Random Number Generator}}, %
  and twice Microsoft has failed, apparently not using standard
  methods for verifying that an RNG has been correctly implemented.
  Consequently, users of Excel's ``rand'' function have been using
  random numbers from an unknown and undocumented RNG of unknown
  period that is not known to pass any standard tests of randomness.
\end{quote}

Les critiques relevées dans les articles ci-dessus ont poussé
Microsoft à améliorer la précision des procédures statistiques depuis
Excel 2010 \citep{Microsoft:Excel2010:2009}. Microsoft affirme
également utiliser un nouveau générateur de nombres aléatoires pour la
fonction \code{RAND()}. Seulement, plusieurs années après le lancement
du produit, il demeure difficile d'obtenir des détails qui
permettraient de dissiper tout doute sur la qualité des nombres
aléatoires fournis pas Excel.

\cautionbox{Si vous programmez en VBA, peut-être serez-vous tenté
  d'utiliser la fonction \code{RND()} pour générer un nombre
  aléatoire. Selon
  l'\link{http://support.microsoft.com/kb/231847}{article 231847} de
  la base de connaissances Microsoft, le générateur de nombres
  aléatoires utilisé par la fonction \code{RND()} est un simple
  générateur congruentiel linéaire.

  Étant donné l'avancement actuel des connaissances dans le domaine
  des générateurs de nombres pseudo-aléatoires, un tel générateur est
  tout à fait archaïque. De plus, le générateur utilise toujours la
  même amorce et, par conséquent, les suites de nombres aléatoires
  sont toujours les mêmes. Pour toute utilisation moindrement sérieuse
  de nombres aléatoires, vous devez donc à tout prix éviter la
  fonction \code{RND()} et de lui préférer un appel à la fonction
  \code{RAND()} de Excel.}


\subsection{Générateurs de R}

On obtient des nombres uniformes sur un intervalle quelconque avec la
fonction \code{runif} dans R. La fonction \code{set.seed} permet de
spécifier la valeur de l'amorce du générateur aléatoire, ce qui est
utile si nous voulons répéter une simulation absolument à l'identique.

R offre la possibilité de choisir entre plusieurs générateurs de
nombres aléatoires différents, ou encore de spécifier son propre
générateur. Par défaut, R utilise le générateur Marsenne--Twister,
considéré comme le plus avancé en ce moment. La période de ce
générateur est $2^{\nombre{19937}} - 1$ (rien de moins!) et la
distribution des nombres est uniforme dans $623$ dimensions consécutives
sur toute la période.

Pour de plus amples détails et les dernières informations sur les
générateurs disponibles et la procédure de réglage de l'amorce,
consulter les rubriques d'aide des fonctions \code{.Random.seed} et
\code{set.seed}.

\begin{prob-astuce}
  Générer les coordonnées uniformes des points sera plus simple et plus
  rapide avec la fonction \code{runif} de R.
\end{prob-astuce}

\begin{prob-solution}
  En premier lieu, écrivons une fonction \code{is.triangle} pour
  déterminer si l'enveloppe convexe de quatre points forme un
  triangle. La fonction prendra en arguments un vecteur \code{x} des
  coordonnées en abscisse des quatre points et un vecteur \code{y} des
  coordonnées en ordonnée. La fonction retournera \code{TRUE} ou
  \code{FALSE} selon que l'enveloppe convexe est un triangle ou non.
<<echo=TRUE>>=
is.triangle <- function(x, y) 3 == length(chull(x, y))
is.triangle(c(8, 1, 7, 10), c(8, 2, 4, 3))
is.triangle(c(7, 5, 2, 1), c(9, 3, 10, 7))
@

  L'expression suivante permet de placer quatre points au hasard dans
  un carré $1 \times 1$, puis de vérifier si leur enveloppe convexe
  est un triangle.
<<echo=TRUE, eval=FALSE>>=
is.triangle(runif(4), runif(4))
@

  Pour répéter cette expression un grand nombre de fois, nous aurons
  recours, tel qu'expliqué à l'\autoref{chap:planification}, à la fonction
  \code{replicate}. Puisque chaque expression exécutée par
  \code{replicate} retourne \code{TRUE} ou \code{FALSE}, le résultat
  sera un vecteur booléen. La valeur moyenne du vecteur booléen
  correspond donc à la proportion d'enveloppes convexes triangulaires
  au fil des \nombre{100 000} simulations.
<<echo=TRUE>>=
mean(replicate(1E5,
     is.triangle(x = runif(4), y = runif(4))))
@

  La valeur ci-dessus est suffisamment proche de $\frac{11}{36} \approx
  0,30556$ pour que nous jugions l'expérience concluante.
\end{prob-solution}


\section{Code informatique}
\label{sec:generation:code}

\def\scriptfilename{generation.R}

\scriptfile{\scriptfilename}
\lstinputlisting[firstline=14]{\scriptfilename}


\section{Exercices}
\label{sec:generation:exercices}

\Opensolutionfile{solutions}[solutions-generation]

\begin{Filesave}{solutions}
\section*{Chapitre \ref*{chap:generation}}
\addcontentsline{toc}{section}{Chapitre \ref*{chap:generation}}

\end{Filesave}

L'\autoref{ex:generation:rgl} requiert d'installer le paquetage
\code{rgl}, disponible dans CRAN;
\citet[chapitre~7]{Goulet:programmer-avec-r:2017} explique la
procédure d'installation d'un paquetage R.

\osxbox{L'utilisation de \code{rgl} sous macOS, requiert
  l'application \code{X11.app}, qui n'est plus livrée avec le système
  depuis la version 10.8 (Mountain Lion). Le projet XQuartz fournit un
  serveur et des bibliothèques client X11 compatibles avec les
  versions de macOS 10.6 et suivantes. Il suffit de télécharger
  l'application depuis \link{http://xquartz.macosforge.org/}.}


\begin{exercice}
  Calculer cinq nombres pseudo-aléatoires avec chacun des générateurs
  congruentiels ci-dessous. Dans tous les cas, $m = 64$. Choisir
  l'amorce.
  \begin{enumerate}
  \item $a = 29$, $c = 17$
  \item $a = 9$, $c = 1$
  \item $a = 13$, $c = 0$
  \item $a = 11$, $c = 0$
  \end{enumerate}
  \begin{sol}
    Dans tous les cas, le générateur de nombres aléatoires est
    \begin{align*}
      x_{i}
      &= (ax_{i-1}+c) \bmod m \\
      &= (ax_{i-1}+c) -
      \left\lfloor
        \frac{ax_{i-1}+c}{m}
      \right\rfloor m
    \end{align*}
    où $m = 64$ et $x_{0} = 19$. Les suites ont été générées avec la
    fonction \code{rand} de la \autoref{fig:generation:rand}.
    \begin{figure}
      \centering
      \begin{framed}
\begin{lstlisting}
rand <- function(n, a, c, m, seed)
{
    x <- numeric(n + 1)
    x[1] <- seed
    for (i in seq(n))
        x[i + 1] <- (a * x[i] + c) %% m
    x[-1]
}
\end{lstlisting}
      \end{framed}
      \caption{Code de la fonction \code{rand}}
      \label{fig:generation:rand}
    \end{figure}
<<echo=FALSE>>=
rand <- function(n, a, c, m, seed)
{
    x <- numeric(n + 1)
    x[1] <- seed
    for (i in seq(n))
        x[i + 1] <- (a * x[i] + c) %% m
    x[-1]
}
@
    \begin{enumerate}
    \item
<<echo=TRUE>>=
rand(n = 5, a = 29, c = 17, m = 64, seed = 19)
@
    \item
<<echo=TRUE>>=
rand(n = 5, a = 9, c = 1, m = 64, seed = 19)
@
    \item
<<echo=TRUE>>=
rand(n = 5, a = 13, c = 0, m = 64, seed = 19)
@
    \item
<<echo=TRUE>>=
rand(n = 5, a = 11, c = 0, m = 64, seed = 19)
@
    \end{enumerate}
  \end{sol}
\end{exercice}

\begin{exercice}
  \begin{enumerate}
  \item Composer une fonction R faisant la mise en œuvre du générateur
    congruentiel multiplicatif avec $m = 2^{13} - 1$ et $a = 17$.
    Générer $500$ nombres pseudo-aléatoire, puis faire un graphique des
    paires $(x_i, x_{i+1})$. Sur combien de lignes les points sont-ils
    alignés?
  \item Répéter la partie a) avec $a = 85$.
  \end{enumerate}
  \begin{sol}
    \begin{enumerate}
    \item Utilisons de nouveau la fonction \code{rand} de la
      \autoref{fig:generation:rand}. Le graphique de la
      \autoref{fig:generation:a=17} a été créé avec les commandes
      ci-dessous. On compte 17 lignes dans le graphique.
<<echo=TRUE, eval=FALSE>>=
x <- rand(n = 500, a = 17, c = 0, m = 2^13 - 1,
          seed = 19)
plot(x[-length(x)], x[-1], xlab = expression(x[i]),
     ylab = expression(x[i + 1]), pch = 19)
@
      \begin{figure}
        \centering
<<echo=FALSE,fig=TRUE>>=
x <- rand(n = 500, a = 17, c = 0, m = 2^13 - 1, seed = 19)
plot(head(x, -1), x[-1],
     xlab = expression(x[i]), ylab = expression(x[i + 1]),
     pch = 19)
@
        \caption{Paires de valeurs du générateur congruentiel
          multiplicatif avec $m = 2^{31} - 1$ et $a = 17$}
        \label{fig:generation:a=17}
      \end{figure}
    \item Similaire à la partie a), sauf que les nombres sont générés
      avec l'expression suivante.
<<echo=TRUE, eval=FALSE>>=
x <- rand(n = 500, a = 85, c = 0, m = 2^13 - 1,
          seed = 19)
@
      Ce générateur semble préférable à celui en a) puisque les
      points sont plus uniformément disposés sur le graphique (voir
      \autoref{fig:generation:a=85}).
      \begin{figure}[btp]
        \centering
<<echo=FALSE,fig=TRUE>>=
x <- rand(n = 500, a = 85, c = 0, m = 2^13 - 1, seed = 19)
plot(x[-length(x)], x[-1],
     xlab = expression(x[i]), ylab = expression(x[i + 1]), pch = 19)
@
        \caption{Paires de valeurs du générateur congruentiel
          multiplicatif avec $m = 2^{31} - 1$ et $a = 85$}
        \label{fig:generation:a=85}
      \end{figure}
    \end{enumerate}
  \end{sol}
\end{exercice}

\begin{exercice}
  \label{ex:generation:rgl}
  Le générateur RANDU, qui a longtemps été le plus populaire
  générateur de nombres pseudo-aléatoires, est défini ainsi:
  \begin{equation*}
    x_i = \nombre{65539} x_{i - 1} \bmod 2^{31}.
  \end{equation*}
  Les nombres aléatoires obtenus avec ce générateur présentent une
  excellente structure aléatoire en une et en deux dimensions. On peut
  toutefois démontrer mathématiquement qu'en trois dimensions, les
  triplets $(x_i, x_{i+1}, x_{i+2})$ se retrouvent sur quinze plans ou
  moins, rendant ainsi assez prévisible la valeur de $x_{i+2}$ étant
  donné les deux autres valeurs. Contentons-nous, ici, de constater
  cet état de fait graphiquement.
  \begin{enumerate}
  \item Générer une suite $\{x_i\}$ de longueur $\nombre{20002}$ avec le
    générateur RANDU et poser $u_i = 2^{-31} x_i$. Pour tous les
    triplets $(u_i, u_{i+1}, u_{i+2})$, sélectionner les cas où $0,5
    \leq u_{i + 1} \leq 0,51$ et faire un graphique de $u_{i+2}$ en
    fonction de $u_i$. Commenter le graphique obtenu.
  \item Générer une suite $\{x_i\}$ de longueur $\nombre{1002}$ avec le
    générateur RANDU. À l'aide de R, placer les triplets $(u_i,
    u_{i+1}, u_{i+2})$ dans un graphique en trois dimensions avec la
    fonction \code{plot3d} du paquetage \code{rgl}, puis faire pivoter
    le graphique pour voir les quinze plans sur lesquels se trouvent
    répartis les points.
  \end{enumerate}
  \begin{sol}
    \begin{enumerate}
    \item On obtient environ 200 points alignés sur 10 lignes.
<<echo=TRUE, eval=FALSE>>=
u <- rand(n = 20002, a = 65539, c = 0, m = 2^31,
          seed = 19)/2^31
mat <- matrix(c(u[1:20000], u[2:20001], u[3:20002]),
              ncol = 3)
mat <- mat[(0.5 <= mat[,2]) & (mat[,2] <= 0.51),
           c(1, 3)]
plot(mat, xlab = expression(u[i]),
     ylab = expression(u[i + 2]))
@
    \item
<<echo=TRUE, eval=FALSE>>=
library(rgl)
u <- rand(n = 1002, a = 65539, c = 0, m = 2^31,
          seed = 19)/2^31
plot3d(u[1:1000], u[2:1001], u[3:1002])
@
    \end{enumerate}
  \end{sol}
\end{exercice}

\Closesolutionfile{solutions}

%%% Local Variables:
%%% mode: latex
%%% TeX-engine: xetex
%%% TeX-master: "methodes-numeriques-en-actuariat_simulation"
%%% coding: utf-8
%%% End:
