\section{Exercices}
\label{sec:ordinateurs:exercices}

%%%
%%% Fichers de solutions et de réponses
%%%

\Opensolutionfile{reponses}[reponses-arithmetique_ordinateurs]
\Opensolutionfile{solutions}[solutions-arithmetique_ordinateurs]

\begin{Filesave}{reponses}
\bigskip
\section*{Réponses}

\noindent
La notation $x_{b}$ signifie que le nombre $x$ est en base $b$. On
omet généralement $b$ pour les nombres en base 10.

\end{Filesave}

\begin{Filesave}{solutions}
\section*{Chapitre \ref{chap:ordinateurs}}
\addcontentsline{toc}{section}{Chapitre \protect\ref{chap:ordinateurs}}

\noindent
La notation $x_{b}$ signifie que le nombre $x$ est en base $b$. On
omet généralement $b$ pour les nombres en base 10.

\end{Filesave}

%%%
%%% Début des exercices
%%%

\begin{exercice}
  Convertir les nombres décimaux suivants en base 6, puis en binaire.
  \begin{enumerate}
  \item 119
  \item 343
  \item 96
  \item 43
  \end{enumerate}
  \begin{sol}
    L'algorithme de conversion des nombres décimaux en une base $b$ se
    résume essentiellement à ceci pour la partie entière:
    \begin{enumerate}[1.]
    \item les chiffres du nombre en base $b$ sont obtenus de droite à
      gauche en prenant le reste de divisions par $b$;
    \item on divise par $b$ d'abord le nombre décimal d'origine, puis
      la partie entière de la division précédente, jusqu'à ce que
      celle-ci soit égale à 0.
    \end{enumerate}
    On a donc les résultats suivants.
    \begin{enumerate}
    \item
      \begin{minipage}[t]{0.48\linewidth}
        Conversion en base 6:
        \begin{align*}
          119 \div 6 &= 19 \text{ reste } 5 \\
           19 \div 6 &= 3 \text{ reste } 1 \\
            3 \div 6 &= 0 \text{ reste } 3,
        \end{align*}
        d'où $119 \equiv 315_6$.
      \end{minipage}
      \hfill
      \begin{minipage}[t]{0.48\linewidth}
        Conversion en binaire:
        \begin{align*}
          119 \div 2 &= 59 \text{ reste } 1 \\
           59 \div 2 &= 29 \text{ reste } 1 \\
           29 \div 2 &= 14 \text{ reste } 1 \\
           14 \div 2 &= 7 \text{ reste } 0 \\
            7 \div 2 &= 3 \text{ reste } 1 \\
            3 \div 2 &= 1 \text{ reste } 1 \\
            1 \div 2 &= 0 \text{ reste } 1,
        \end{align*}
        d'où $119 \equiv 1110111_2$.
      \end{minipage}
    \item
      \begin{minipage}[t]{0.48\linewidth}
        Conversion en base 6:
        \begin{align*}
          343 \div 6 &= 57 \text{ reste } 1 \\
           57 \div 6 &= 9 \text{ reste } 3 \\
            9 \div 6 &= 1 \text{ reste } 3 \\
            1 \div 6 &= 0 \text{ reste } 1,
        \end{align*}
        d'où $343 \equiv 1331_6$.
      \end{minipage}
      \hfill
      \begin{minipage}[t]{0.48\linewidth}
        Conversion en binaire:
        \begin{align*}
          343 \div 2 &= 171 \text{ reste } 1 \\
          171 \div 2 &= 85 \text{ reste } 1 \\
           85 \div 2 &= 42 \text{ reste } 1 \\
           42 \div 2 &= 21 \text{ reste } 0 \\
           21 \div 2 &= 10 \text{ reste } 1 \\
           10 \div 2 &= 5 \text{ reste } 0 \\
            5 \div 2 &= 2 \text{ reste } 1 \\
            2 \div 2 &= 1 \text{ reste } 0 \\
            1 \div 2 &= 0 \text{ reste } 1,
        \end{align*}
        d'où $119 \equiv 101010111_2$.
      \end{minipage}
    \item
      \begin{minipage}[t]{0.48\linewidth}
        Conversion en base 6:
        \begin{align*}
          96 \div 6 &= 16 \text{ reste } 0 \\
          16 \div 6 &= 2 \text{ reste } 4 \\
           2 \div 6 &= 0 \text{ reste } 2,
        \end{align*}
        d'où $96 \equiv 240_6$.
      \end{minipage}
      \hfill
      \begin{minipage}[t]{0.48\linewidth}
        Conversion en binaire:
        \begin{align*}
          96 \div 2 &= 48 \text{ reste } 0 \\
          48 \div 2 &= 24 \text{ reste } 0 \\
          24 \div 2 &= 12 \text{ reste } 0 \\
          12 \div 2 &= 6 \text{ reste } 0 \\
           6 \div 2 &= 3 \text{ reste } 0 \\
           3 \div 2 &= 1 \text{ reste } 1 \\
           1 \div 2 &= 0 \text{ reste } 1,
        \end{align*}
        d'où $96 \equiv 1100000_2$.
      \end{minipage}
    \item
      \begin{minipage}[t]{0.48\linewidth}
        Conversion en base 6:
        \begin{align*}
          43 \div 6 &= 7 \text{ reste } 1 \\
           7 \div 6 &= 1 \text{ reste } 1 \\
           1 \div 6 &= 0 \text{ reste } 1,
        \end{align*}
        d'où $43 \equiv 111_6$.
      \end{minipage}
      \hfill
      \begin{minipage}[t]{0.48\linewidth}
        Conversion en binaire:
        \begin{align*}
          43 \div 2 &= 21 \text{ reste } 1 \\
          21 \div 2 &= 10 \text{ reste } 1 \\
          10 \div 2 &= 5 \text{ reste } 0 \\
           5 \div 2 &= 2 \text{ reste } 1 \\
           2 \div 2 &= 1 \text{ reste } 0 \\
           1 \div 2 &= 0 \text{ reste } 1,
        \end{align*}
        d'où $43 \equiv 101011_2$.
      \end{minipage}
    \end{enumerate}
  \end{sol}
  \begin{rep}
    \begin{enumerate}
    \item $315_6$, $1110111_2$
    \item $1331_6$, $101010111_2$
    \item $240_6$, $1100000_2$
    \item $111_6$, $101011_2$
    \end{enumerate}
  \end{rep}
\end{exercice}

\begin{exercice}
  Convertir les nombres hexadécimaux suivants en nombres décimaux.
  \begin{enumerate}
  \item A1B
  \item 12A
  \item B41
  \item BAFFE
  \end{enumerate}
  \begin{sol}
    On fait les deux premières conversions à l'aide de la définition
    d'un nombre hexadécimal, puis les deux dernières à l'aide de
    l'algorithme de conversion des nombres en base $b$ vers la base
    10.
    \begin{enumerate}
    \item $\text{A1B}_{16} = 10 \times 16^2 + 1 \times 16 + 11 = \nombre{2587}$
    \item $\text{12A}_{16} = 1 \times 16^2 + 2 \times 16 + 10 = 298$
    \item $\text{B41}_{16} = (11 \times 16 + 4) \times 16 + 1 = \nombre{2881}$
    \item $\text{BAFFE}_{16} = ((((11 \times 16 + 10) \times 16) + 15)
      \times 16) + 15) \times  + 14 = \nombre{765950}$
    \end{enumerate}
  \end{sol}
  \begin{rep}
    \begin{inparaenum}
    \item \nombre{2587}
    \item 298
    \item \nombre{2881}
    \item \nombre{765950}
    \end{inparaenum}
  \end{rep}
\end{exercice}

\begin{exercice}
  \begin{enumerate}
  \item Utiliser l'algorithme de conversion des nombres en base $b$
    vers la base 10 et les idées de
    l'exemple~\ref{ex:ordinateurs:position_dans_matrice} des notes de
    cours pour trouver une formule générale donnant la position de
    l'élément $a_{ijk}$ d'un tableau de dimensions $I \times J \times
    K$ dans l'ordre de la liste des éléments du tableau. Utiliser
    l'ordre lexicographique, où le tableau est rempli dans l'ordre
    \begin{equation*}
      a_{111}, a_{112}, \dots, a_{11K}, a_{121}, a_{122}, \dots
    \end{equation*}
  \item Répéter la partie a) en utilisant l'ordre R, où le tableau
    est plutôt rempli dans l'ordre $a_{111}, a_{211}, \dots, a_{I11},
    a_{121}, a_{221}, \dots$.  Comparer la réponse avec celle de
    l'exercice~\ref{operateurs}.\ref{exercice:operateurs:ijk}~b) de la
    partie~I.
  \end{enumerate}
  \begin{sol}
    La généralisation de l'algorithme de conversion des nombres en
    base $b$ vers la base 10 à la conversion d'un nombre
    \begin{displaymath}
      x = x_{m-1}x_{m-2} \cdots x_1x_0
    \end{displaymath}
    en base $[b_{m-1}\; \dots\; b_0]$ vers la base 10 est la suivante
    (nombre entiers seulement):
    \begin{enumerate}[1.]
    \item Poser $x = 0$.
    \item Pour $i = m - 1, m - 2, \dots, 0$, faire les étapes suivantes.
      \begin{enumerate}
      \item Trouver $d_i$, le nombre décimal correspondant au symbole
        $x_i$.
      \item Poser $x = x b_{i - 1} + d_i$, avec $b_{-1} = 1$.
      \end{enumerate}
    \end{enumerate}
    Cet algorithme permet de trouver les formules demandées.
    \begin{enumerate}
    \item Tel que présenté à l'exemple 4.6 des notes de cours, on
      trouve la position de l'élément $a_{ijk}$ dans l'ordre de la
      liste des éléments du tableau en convertissant le nombre $[i -
      1\; j - 1\; k - 1]$ de la base $[I\; J\; K]$ à la base 10, puis
      à additionnant 1. À l'aide de l'algorithme ci-dessus, on obtient
      \begin{displaymath}
        [((i - 1) \times J + j - 1) \times K + k - 1] + 1
        = k + K (j - 1 + J (i - 1))
      \end{displaymath}
    \item Dans l'ordre S, on convertit le nombre $[k - 1\; j - 1\; i -
      1]$ exprimé dans la base $[K\; J\; I]$ en base 10. On obtient alors
      \begin{displaymath}
        [((k - 1) \times J + j - 1) \times I + i - 1] + 1
        = i + I (j - 1 + J (k - 1))
      \end{displaymath}
      soit la même réponse qu'à l'exercice 3.7~b) de
      \cite{Goulet_intro_S}.
    \end{enumerate}
  \end{sol}
  \begin{rep}
    \begin{enumerate}
    \item $k + K (j - 1 + J (i - 1))$
    \item $i + I (j - 1 + J (k - 1))$
    \end{enumerate}
  \end{rep}
\end{exercice}

\begin{exercice}
  La norme IEEE~754 pour les nombres en virgule flottante $(S,
  E, F)$ en simple précision est le suivant:
  \begin{itemize}
  \item longueur totale de $m = 32$ bits;
  \item 1 bit pour le signe $S$ (valeur de 0 pour un nombre positif);
  \item 8 bits pour l'exposant $E$, avec un biais de 127;
  \item 23 bits pour la partie fractionnaire $F$.
  \end{itemize}
  Un nombre $x$ est donc représenté comme
  \begin{displaymath}
    x = (-1)^S \times 2^{E - 127} \times 1,F.
  \end{displaymath}
  Trouver les valeurs $\varepsilon$, $x_{\max}$ et $x_{\min}$ pour les
  nombres en simple précision. Comparer les résultats avec les limites
  du type \texttt{Single} en VBA.
  \begin{sol}
    Voir les notes de cours de la section 4.4. Les calculs sont
    exactement les mêmes que pour les nombres en double précision.
  \end{sol}
  \begin{rep}
    $\varepsilon = 2^{-23} = 1,192 \times 10^{-7}$,
    $x_{\max} = (2 - 2^{-23}) \times 2^{127} = 3,403 \times 10^{38}$,
    $x_{\min} = 2^{-126} = 1,175 \times 10^{-38}$ (nombre normal) ou
    $x_{\min} = 2^{-149} = 1,401 \times 10^{-45}$ (nombre sous-normal)
  \end{rep}
\end{exercice}

\begin{exercice}
  Outre les types \texttt{Single} et \texttt{Double} pour représenter
  des nombres en virgule flottante, le VBA dispose également des types
  \texttt{Integer}, \texttt{Long} et \texttt{Byte} pour représenter
  des nombres entiers. Comme son nom l'indique, le type \texttt{Byte}
  utilise huit bits d'espace mémoire et ne sert que pour les entiers
  positifs. Les types \texttt{Integer} et \texttt{Long} requièrent 16
  et 32 bits, respectivement, et peuvent contenir des nombres
  négatifs. En supposant qu'un bit est réservé pour le signe dans ces
  deux derniers types (ce qui n'est pas exactement le cas), trouver le
  plus grand nombre admissible pour chaque type de données.
  \begin{sol}
    L'étendue des nombres admissibles pour le type \texttt{Byte} est
    $[0, 2^8 - 1] = [0, 255]$. Les nombres maximaux pour les types
    \texttt{Integer} et \texttt{Long} sont, respectivement, $2^{15} -
    1 = \nombre{32767}$ et $2^{31} - 1 = \nombre{2147483647}$.
    L'étendue est plus grande de 1 pour les nombres négatifs
    ($-\nombre{32768}$ et $-\nombre{2147483648}$) parce que les
    nombres sont en fait stockés en compléement à deux; voir
    \url{http://fr.wikipedia.org/wiki/Complément_à_deux}.
  \end{sol}
  \begin{rep}
    Type \texttt{Byte}: 255; type \texttt{Integer}: \nombre{32767};
    type \texttt{Long}: \nombre{2147483647}.
  \end{rep}
\end{exercice}

\begin{exercice}
  Représenter les nombres suivants comme des nombres en virgule
  flottante en simple précision selon la norme IEEE~754.
  \begin{enumerate}
  \item $-\nombre{1234}$
  \item 55
  \item \nombre{8191}
  \item $-10$
  \item $\frac{2}{3}$
  \item $\frac{1}{100}$
  \end{enumerate}
  \begin{sol}
    Dans les égalités ci-dessous, le côté droit est en binaire.
    \begin{enumerate}
    \item Premièrement, $1234 \equiv 10011010010_2$. On a donc
      \begin{align*}
        -\nombre{1234}
        &= (-1)^1 \times 2^{10} \times 1,001101001 \\
        &= (-1)^1 \times 2^{137 - 127} \times 1,1010010.
      \end{align*}
      Or, puisque $137 \equiv 10001001_2$, on a la représentation en
      simple précision
      \begin{displaymath}
        \ieee{1}{10001001}{00110100100000000000000}
      \end{displaymath}
    \item On a $55 \equiv 110111_2$, d'où
      \begin{align*}
        55
        &= (-1)^0 \times 2^5 \times 1,10111 \\
        &= (-1)^0 \times 2^{132 - 127} \times 1,10111.
      \end{align*}
      Or, puisque $132 \equiv 10000100_2$, on a la représentation en
      simple précision
      \begin{displaymath}
        \ieee{0}{10000100}{10111000000000000000000}
      \end{displaymath}
    \item On a $\nombre{8191} \equiv 1111111111111_2$ et $149 \equiv
      10001011$, d'où
      \begin{align*}
        \nombre{8191}
        &= (-1)^0 \times 2^{12} \times 1,111111111111 \\
        &= (-1)^0 \times 2^{149 - 127} \times 1,111111111111 \\
        &= \ieee{0}{10001011}{11111111111100000000000}.
      \end{align*}
    \item On a $10 \equiv 1010_2$ et $130 \equiv
      10000010$, d'où
      \begin{align*}
        -10
        &= (-1)^1 \times 2^3 \times 1,010 \\
        &= (-1)^1 \times 2^{130 - 127} \times 1,010 \\
        &= \ieee{1}{10000010}{01000000000000000000000}.
      \end{align*}
    \item La représentation de $\frac{2}{3}$ en binaire est
      $0,101010\dots$. (La façon la plus simple d'obtenir ce résultat
      consiste à convertir $\frac{2}{3} \times 2^n$, où $n$ est le
      nombre de bits souhaité après la virgule). Puisque $126 \equiv
      1111110_2$, on a
      \begin{align*}
        \frac{2}{3}
        &= (-1)^0 \times 2^{-1} \times 1,01010101010101010101010 \\
        &= (-1)^0 \times 2^{126 - 127} \times 1,01010101010101010101010 \\
        &= \ieee{0}{01111110}{01010101010101010101010}.
      \end{align*}
    \item La représentation binaire de $\frac{1}{100}$ est infinie:
      $0,000000101000111101\dots$. Puisque $120 \equiv 01111000_2$, on
      a
      \begin{align*}
        \frac{1}{100}
        &= (-1)^0 \times 2^{-7} \times 1,01000111101011100001010 \\
        &= (-1)^0 \times 2^{120 - 127} \times 1,01000111101011100001010 \\
        &= \ieee{0}{01111000}{01000111101011100001010}
      \end{align*}
    \end{enumerate}
  \end{sol}
  \begin{rep}
    \begin{enumerate}
    \item \ieee{1}{10001001}{00110100100000000000000}
    \item \ieee{0}{10000100}{10111000000000000000000}
    \item \ieee{0}{10001011}{11111111111100000000000}
    \item \ieee{1}{10000010}{01000000000000000000000}
    \item \ieee{0}{01111110}{01010101010101010101010}
    \item \ieee{0}{01111000}{01000111101011100001010}
    \end{enumerate}
  \end{rep}
\end{exercice}

\begin{exercice}
  \label{ex:ordinateurs:ieee}
  Les nombres ci-dessous sont représentés en format binaire selon la
  norme IEEE~754 pour les nombres en simple précision. Convertir ces
  nombres en décimal.
  \begin{enumerate}
  \item \ieee{0}{00111101}{10010000100000000000000}
  \item \ieee{1}{00111101}{10010000100000000000000}
  \item \ieee{0}{10000100}{10010000100000000000000}
  \item \ieee{1}{10000100}{10010000100000000000000}
  \end{enumerate}
  \begin{sol}
    \begin{enumerate}
    \item Puisque $111101_2 \equiv 61$, on a le nombre
      \begin{align*}
        (-1)^0 \times 2^{61 - 127} \times 1,100100001
        &= (-1)^0 \times 2^{-66} \times 1,100100001 \\
        &= 2^{-66} (1 + 2^{-1} + 2^{-4} + 2^{-9}) \\
        &\equiv \nombre{2,120229346} \times 10^{-20}.
      \end{align*}
    \item Signe inversé par rapport à la partie a).
    \item Puisque $10000100_2 = 2^7 + 2^2 \equiv 132$, on a le nombre
      \begin{align*}
        (-1)^0 \times 2^{132 - 127} \times 1,100100001
        &= (-1)^0 \times 2^5 \times 1,100100001 \\
        &= 2^5 (1 + 2^{-1} + 2^{-4} + 2^{-9}) \\
        &\equiv \nombre{50,0625}.
      \end{align*}
    \item Signe inversé par rapport à la partie c).
    \end{enumerate}
  \end{sol}
  \begin{rep}
    \sloppy
    \begin{inparaenum}
    \item $\nombre{2,120229346} \times 10^{-20}$
    \item $\nombre{-2,120229346} \times 10^{-20}$
    \item $50,0625$
    \item $-50,0625$
    \end{inparaenum}
  \end{rep}
\end{exercice}

\begin{exercice}
  Trouver, pour les nombres des parties a) et c) de l'exercice
  \ref{chap:ordinateurs}.\ref{ex:ordinateurs:ieee}, le nombre suivant
  et le nombre précédent en représentation binaire.
  \begin{sol}
    \begin{enumerate}
    \item Le nombre suivant est
      \begin{displaymath}
        \ieee{0}{00111101}{10010000100000000000001},
      \end{displaymath}
      soit
      \begin{displaymath}
        2^{-66} (1 + 2^{-1} + 2^{-4} + 2^{-9} + 2^{-23}) \\
        \equiv \nombre{2,120229508} \times 10^{-20}.
      \end{displaymath}
      Le nombre précédent est
      \begin{displaymath}
        \ieee{0}{00111101}{10010000011111111111111},
      \end{displaymath}
      soit
      \begin{displaymath}
        2^{-66} (1 + 2^{-1} + 2^{-4} + 2^{-9} - 2^{-23}) \\
        \equiv \nombre{2,120229185} \times 10^{-20}.
      \end{displaymath}
      \stepcounter{enumi}
    \item Le nombre suivant est
      \begin{displaymath}
        \ieee{0}{10000100}{10010000100000000000001},
      \end{displaymath}
      soit
      \begin{displaymath}
        2^5 (1 + 2^{-1} + 2^{-4} + 2^{-9} + 2^{-23}) \\
        \equiv \nombre{50,062503815}.
      \end{displaymath}
      Le nombre précédent est
      \begin{displaymath}
        \ieee{0}{10000100}{10010000011111111111111},
      \end{displaymath}
      soit
      \begin{displaymath}
        2^5 (1 + 2^{-1} + 2^{-4} + 2^{-9} - 2^{-23}) \\
        \equiv \nombre{50,062496185}.
      \end{displaymath}
      On remarque que les nombres sont beaucoup plus éloignés les uns
      des autres ici qu'en a).
    \end{enumerate}
  \end{sol}
  \begin{rep}
    \begin{inparaenum}
    \item $\nombre{2,120229508} \times 10^{-20}$ et
      $\nombre{2,120229185} \times 10^{-20}$
      \stepcounter{enumi}
    \item $\nombre{50,062503815}$ et $\nombre{50,062496185}$
    \end{inparaenum}
  \end{rep}
\end{exercice}

\Closesolutionfile{reponses}
\Closesolutionfile{solutions}

%%%
%%% Insérer les réponses
%%%
\input{reponses-arithmetique_ordinateurs}


%%% Local Variables:
%%% mode: latex
%%% TeX-master: "exercices_methodes_numeriques-partie_3"
%%% End:
